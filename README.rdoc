Caterpillar is a developer tool to help building Rails applications for Liferay portlets.
This is possible with the help of Rails-portlet[http://rails-portlet.rubyforge.org].

The aim is to minimize the needed additions to the Rails framework and interfere with the developer workflow.

The command-line tool <tt>caterpillar</tt> should be executed in the Rails project root directory.
You can install and upgrade the <tt>rails-portlet</tt> JAR and generate dynamic portlet XML and also
deploy them. See the task description below - and you can also run <tt>caterpillar --describe</tt>.


The optional Caterpillar Rails plugin offers specialized helpers and views for better Liferay integration
and to ease the development. Not to mention the portlet test bench application.

Developers should know that this is required to successfully run the <tt>rails-portlet</tt> test suite,
where JUnit tests do actual requests to the Rails app.

You can take plugins into use by running
  $ caterpillar pluginize
in the Rails directory, but you need to remember that with each subsequent upgrade of Caterpillar, you would need to
  rm vendor/plugins/caterpillar && caterpillar pluginize
each time. Rails is quite picky where it will load the views - security issue.

Maybe caterpillar could have an upgrade task to handle this?


== Quickstart
Start up a new Rails project:

  $ rails example
  $ cd example
  $ caterpillar pluginize

Caterpillar contains Rails portlet test bench, which can be activated by inserting 
+map.caterpillar+ in RAILS_ROOT/config/routes.rb before any other routes.

This route mapping is also needed to use portlet security features to prevent UID faking.
ApplicationController also needs to have:
  include Caterpillar::Security
  secure_portlet_sessions

If you are connecting to the Liferay database, add +require 'lportal'+ in the Rails startup:
  $ echo "require 'lportal'" > config/initializers/lportal.rb
And set up the database connection. See [http://lportal.rubyforge.org/]

Now you should run +caterpillar portlets+ to check if your installation is working.
The output should include these lines:

  * Portlet configuration ***********************
  Caterpillar
    Rails-portlet test bench      "portlet_test_bench"  []

Then you can start up the server (./script/server) and navigate to http://localhost:3000/caterpillar/test_bench


== Useful tasks 
Here are the most useful tasks; see the rdoc documentation and caterpillar --describe for the full feature list.

  <tt>xml</tt>::  processes the portlet XML configuration in accordance with the named routes

  <tt>xml:deploy</tt>::  deploys the created XML to the J2EE portlet container 

++jar:install++
 - installs the Rails-portlet JAR into Liferay's classpath

++deploy++
 - warbles the application, updates the XML configuration and copies these to Liferay

++pluginize++
 - provides a navigation view in development (you will have to enable it manually).
   See Caterpillar::Navigation
 - includes the portlet test bench

++db:migrate++ and ++db:update++
 - offers a set of migrations to help with Liferay integration

 - patches Web::Portlet in the lportal[http://lportal.rubyforge.org] library, so manipulating
   portlets is easier. This requires running the migrations.

++fixtures++
 - imports live data from the production database for testing



Caterpillar is open source! Patches and comments are welcome.
Join the bugs mailing list (http://rubyforge.org/mailman/listinfo/rails-portlet-bugs) to request help.

