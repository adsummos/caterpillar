Caterpillar is a developer tool to help building Rails applications for Liferay portlets.
This is possible with the help of Rails-portlet[http://github.com/tulios/html2jsr286].

The aim is to minimize the needed additions to the Rails framework and interfere with the developer workflow.

Main features:

* installs the portlet JAR to Liferay's [+CLASSPATH+]
* dynamic portlet XML creation based on named routes
* deploys the generated XML to Liferay, requires Liferay restart
* implements session security by shared key authentication

For developers:

* portlet test bench
* a Rails view helper which lists portlets during development


== Quickstart
Rubygems does not seem to get the most uptodate version. The release should be >= 1.3.0.
Please download the latest release from Rubyforge.

  $ gem install caterpillar-1.3.0.gem

Start up a new Rails project:

  $ rails example
  $ cd example
  $ caterpillar pluginize

Caterpillar contains Rails portlet test bench, which can be activated by inserting 
+map.caterpillar+ in RAILS_ROOT/config/routes.rb before any other routes.

This route mapping is also needed to use portlet security features to prevent UID faking.
ApplicationController also needs to have:
  include Caterpillar::Security
  secure_portlet_sessions

If you are connecting to the Liferay database, add +require 'lportal'+ in the Rails startup:
  $ echo "require 'lportal'" > config/initializers/lportal.rb
And set up the database connection. See [http://lportal.rubyforge.org/]

Now you should run +caterpillar portlets+ to check if your installation is working.
The output should include these lines:

  * Portlet configuration ***********************
  Caterpillar
    Rails-portlet test bench      "portlet_test_bench"  []

Then you can start up the server (./script/server) and navigate to http://localhost:3000/caterpillar/test_bench


== Good to know
The command-line tool <tt>caterpillar</tt> should be executed in the Rails project root directory.
You can install and upgrade the <tt>rails-portlet</tt> JAR and generate dynamic portlet XML and also
deploy them. See the task description below - and you can also run <tt>caterpillar --describe</tt>.

The optional Caterpillar Rails plugin offers specialized helpers and views for better Liferay integration
and to ease the development. Not to mention the portlet test bench application.

Developers should know that this is required to successfully run the <tt>rails-portlet</tt> test suite,
where JUnit tests do actual requests to the Rails app.

You can take plugins into use by running
  $ caterpillar pluginize
in the Rails directory, but you need to remember that with each subsequent upgrade of Caterpillar, you would need to
  rm vendor/plugins/caterpillar && caterpillar pluginize
each time. Rails is quite picky where it will load the views - security issue.

Maybe caterpillar could have an upgrade task to handle this?


== Useful tasks 
Here are the most useful tasks; see the rdoc documentation and caterpillar --describe for the full feature list.

<tt>xml</tt>::  processes the portlet XML configuration in accordance with the named routes

<tt>xml:deploy</tt>::  deploys the created XML to the J2EE portlet container 

<tt>jar:install</tt>:: installs the Rails-portlet JAR into Liferay's classpath

<tt>deploy</tt>:: warbles the application, updates the XML configuration and copies these to Liferay

<tt>pluginize</tt>:: copies caterpillar to vendor/plugins

<tt>fixtures</tt>:: imports live data from the production database for testing


Join the bugs mailing list (http://rubyforge.org/mailman/listinfo/rails-portlet-bugs) to request help.

== How to implement File Download

In order to use download links in your webpages, you need to use the method:
  send_file(file_path, :filename=>"filename")

For example, on DownloadController, 'start' method allows the download of 'image.jpg' file.     
  def start
    send_file('../images/image.jpg', :filename => "image.jpg")
  end

In your webpage, you should use the following method which will manage your urls:
  liferay_resource_url(:controller=> :controllerName, :action=> :methodName)  
           
It should look like: 
  <%= link_to "Download", liferay_resource_url(:controller => :download , :action => :start) %>

To access the +liferay_resource_url+ method you will need to include the Liferay module in your application_helper
	include Caterpillar::Helpers::Liferay

This method will generate a valid url for +serveResource+ method in liferay
